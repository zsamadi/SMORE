function gExResults=genExAnalysis(cellTable,MNodesCell, options)

isRndTest=options.isRndTest;
isPlotPDF=options.isPlotPDF;
isAddNoise=options.isAddNoise;
pvalAllHMapMin=abs(log10(options.pvalAllHMapMin));
outputFolderName=options.outputFolderName;

isTwoSided=options.isTwoSided;
W=options.W;


cTypes=cellTable.cellType;
minPvalEval=options.pvalAllHMapMin;
miNumCell=5;
minFoldChange=0;
pvalAllTheoMin=3;
tablePvalQMin=0.8;

geneAnnotes=cellTable.Properties.VariableNames(options.gStart:end);
geneExpression=cellTable(:, options.gStart:end);
if ~isempty(geneExpression)
    geneExpression=table2array(geneExpression);
    if isAddNoise
        temp=geneExpression;
        temp(temp==0)=max(temp(:));
        geneExpression=geneExpression+1e-5.*min(temp).*rand(size(geneExpression)).*(geneExpression>0);
    end
    allNodeIdx=(1:length(cTypes));
    foldChangeRandC={};
    pvalueMedRandC={};
    iResult=1;
    pvalueMedTheoC=cell(1000, 1);
    pvalueMedTheoC=cell(1000, 1);
    foldChangeC=cell(1000, 1);
    addressC=cell(1000, 1);

    medMotC=cell(1000, 1);

    medtypeC=cell(1000, 1);

    numMotCellsC=cell(1000, 1);

    geneSet=cell(1000, 1);
    numExtMotifs=length(MNodesCell);

    for iMt=1:numExtMotifs
        fprintf('Evaluating gene expression for motif number:  %d\n', iMt);
        motifPaths=MNodesCell{iMt};
        motifPathsType=cTypes(motifPaths);
        motifPathsTypeRv=motifPathsType(:, end:-1:1);

        if all(motifPathsType(:)==motifPathsTypeRv(:))

            postLoop=(1:ceil(W/2));
        else
            postLoop=(1:W);
        end

        for iMTPosti=postLoop
            motifPathsFirst=motifPaths(:, iMTPosti);
            motifPathsFirst=motifPathsFirst(:);
            motifPathsFirst=unique(motifPathsFirst);
            AMotifPathsTypes=cTypes(motifPathsFirst);
            [AMotifPathsTypesU, ~, jPU]=unique(AMotifPathsTypes);
            cntPT=accumarray(jPU, 1);
            [cntPTS, ist]=sort(cntPT);
            AMotifPathsTypesU=AMotifPathsTypesU(ist);
            AMotifPathsTypesU=AMotifPathsTypesU(cntPTS>miNumCell);
            cntPTS=cntPTS(cntPTS>miNumCell);
            for iMType=1:length(AMotifPathsTypesU)

                geneExpressionL=geneExpression;


                AMotifPathsi=motifPathsFirst(AMotifPathsTypes==AMotifPathsTypesU(iMType));

                typeNodeIdx=allNodeIdx(cTypes==AMotifPathsTypesU(iMType));

                motifInType=ismember(typeNodeIdx, AMotifPathsi);

                if isRndTest
                    SIDs=cellTable.SID;
                    MAIDs=SIDs(AMotifPathsi(:, 1));
                    TAIDs=SIDs(typeNodeIdx);

                    motifInTypeRand=false(size(motifInType));

                    MAnimal_IDsU=unique(MAIDs);
                    for iMAI=1:length(MAnimal_IDsU)
                        flagTi=TAIDs==MAnimal_IDsU(iMAI);
                        motifInTypei=motifInType(flagTi);
                        motifInTypeRand(flagTi)=motifInTypei(randperm(length(motifInTypei)));
                    end
                    motifInType=motifInTypeRand;
                end

                AMotifPathsAllFlagi=(cTypes==AMotifPathsTypesU(iMType));
                geneExAlli=geneExpressionL(AMotifPathsAllFlagi, :);
                geneExi=geneExAlli(motifInType, :);
                geneNExi=geneExAlli;
                numMotCells=[sum(motifInType),sum(~motifInType)];
                medMot=median(geneExi);
                medMot=medMot(:);
                medtypeMot=median(geneNExi);
                medtypeMot=medtypeMot(:);

                [pvalueMedTheo, meDeltaMot]= computeGeneDProfile(geneExAlli, motifInType, isTwoSided);
                EvalFlag= pvalueMedTheo<minPvalEval;
                if isPlotPDF
                    if any(EvalFlag)
                        tPValH=pvalueMedTheo(EvalFlag);
                        geneEvalAnnotes=geneAnnotes(EvalFlag);
                        geneExAllEval=geneExAlli(:, EvalFlag);
                        [pdfMDCell, edgeMDCell]= computeGeneDCDF(geneExAllEval, motifInType);
                        numPlots=sum(EvalFlag);
                        meDeltaMotPlot=meDeltaMot(EvalFlag);
                        motAddr=[iMt, iMTPosti, AMotifPathsTypesU(iMType),  cntPTS(iMType), length(motifInType)];
                        f=figure('visible','off');
                        f.Position(4)=2*f.Position(4);



                        for iplot=1:numPlots
                            subplot(numPlots, 1,iplot)
                            
                            pdfPlot=max(pdfMDCell{iplot}, 0);
                            pdfPlot=pdfPlot/sum(pdfPlot);
                            edgePlot=edgeMDCell{iplot};
                            if length(pdfPlot)>50

                                temp=cumsum(pdfPlot);
                                temp(end)=1;



                                idxRight0=find(temp>=1-eps, 1);  
                                
                                tmp=[0; pdfPlot(:)];
                                idxLeft0=find(cumsum(tmp)==0,1, 'last')-3;
                                if idxLeft0<5 
                                    idxLeft0=1;
                                end
                  
    
                                pdfPlot=pdfPlot(idxLeft0:idxRight0);
                                edgePlot=edgePlot(idxLeft0:idxRight0);
                            end
                            
                            if isempty(edgePlot)
                                check=1;
                            end

                            scatter(edgePlot, pdfPlot,50, 'filled')
                            hold on
                            plot(edgePlot, pdfPlot, '.-.', 'LineWidth',2, 'Color','b')
                            xlim([min(edgePlot(1), meDeltaMotPlot(iplot)-1), max(edgePlot(end), meDeltaMotPlot(iplot)+1)])
                            xline(meDeltaMotPlot(iplot),'-', {'Motif','Delta', sprintf('%2.4f',meDeltaMotPlot(iplot))}, 'color', 'r', 'linewidth', 2)
                            if iplot==1
                                titleTex=sprintf('theo pval=%2.2f with motif addr %d,%d,%d(%d/%d), gene=%s\n', abs(log(tPValH(iplot))), motAddr, string(geneEvalAnnotes{iplot}));
                            else
                                titleTex=sprintf('theo pval=%2.2f, gene=%s\n', abs(log(tPValH(iplot))), string(geneEvalAnnotes{iplot}));
                            end
                            title(titleTex);
                            grid on
                        end
                        figName=sprintf('MTAddr-%d-%d-%d',motAddr(1:3));
                        if isRndTest
                            figName=strcat('Rand', figName);
                        end
                        if ~isTwoSided
                            figName=strcat('OS', figName);
                        end

                        figName=strcat(outputFolderName, figName, '.jpg');

                        xlabel('delta median')
                        ylabel('probability')
                        saveas(gcf, figName)
                        close(gcf);

                    end
                end


                foldChange=meDeltaMot(:);



                foldChangeN=abs(foldChange)/max(abs(foldChange));

                siGenes=(pvalueMedTheo<1) & (foldChangeN>=minFoldChange);



                pvalueMedTheoC{iResult}=pvalueMedTheo(siGenes);
                foldChangeC{iResult}=foldChange(siGenes);
                addressC{iResult}=[iMt, iMTPosti, AMotifPathsTypesU(iMType)];

                medMotC{iResult}=medMot(siGenes);

                medtypeC{iResult}=medtypeMot(siGenes);

                numMotCellsC{iResult}=numMotCells;



                geneset0=(1:size(geneExpression, 2)).';

                geneSet{iResult}=geneset0(siGenes);
                iResult=iResult+1;

            end
        end
    end

    % save Results

    fprintf('Output results are being saved at %s\n', outputFolderName);


    geneSet=geneSet(1:iResult-1);
    pvalueMedTheoC=pvalueMedTheoC(1:iResult-1);
    foldChangeC=foldChangeC(1:iResult-1);
    addressC=addressC(1:iResult-1);
    medMotC=medMotC(1:iResult-1);
    medtypeC=medtypeC(1:iResult-1);
    numMotCellsC=numMotCellsC(1:iResult-1);


    gExResults.geneSet=geneSet;
    gExResults.pvalueMedTheoC=pvalueMedTheoC;
    gExResults.foldChangeC=foldChangeC;
    gExResults.addressC=addressC;

    %% plot volcano


    addressAll0=vertcat(addressC{:});



    % heatmap for all cases, ordered with address
    lengthV=zeros(length(pvalueMedTheoC),1);

    for iPV=1:length(pvalueMedTheoC)
        lengthV(iPV)=length(pvalueMedTheoC{iPV});

    end



    pvalAllHist=vertcat(pvalueMedTheoC{:});
    pvalAllRandHist=vertcat(pvalueMedRandC{:});

    pvalAllHist=abs(log(pvalAllHist));
    pvalAllRandHist=abs(log(pvalAllRandHist));

    isInfPval=isinf(pvalAllHist);
    pvalAllHist(isInfPval)=ceil(max(pvalAllHist(~isInfPval))+1);

    % [pvalAllHistSort, iHSort]=sort(pvalAllHist);


    pvalAllTheo=vertcat(pvalueMedTheoC{:});

    pvalAllTheo=abs(log(pvalAllTheo));


    isInfPval=isinf(pvalAllTheo);
    pvalAllTheo(isInfPval)=ceil(max(pvalAllTheo(~isInfPval))+1);



    % pvalAllFitSort=pvalAllTheo(iHSort);


    pvalAllFlag=pvalAllTheo>pvalAllTheoMin;

    geneSetAll=vertcat(geneSet{:});

    geneSetAllS=geneSetAll(pvalAllFlag);
    pvalAllHistS=pvalAllHist(pvalAllFlag);


    pvalAllFitS=pvalAllTheo(pvalAllFlag);

    foldChangeAll=vertcat(foldChangeC{:});

    foldChangeRandAll=vertcat(foldChangeRandC{:});



    figure('visible','off')
    scatter(foldChangeAll, pvalAllHist, 'filled')
    hold on
    scatter(foldChangeRandAll, pvalAllRandHist, 'filled')

    grid minor
    legend('motif gene expression pvalues')
    xlabel('delta median')
    ylabel('absolute log pvalue')

    figName='volcano';
    figName=strcat(outputFolderName, figName, '.jpg');

    saveas(gcf,figName);
    close(gcf);



    textingFlag= pvalAllHistS>=quantile(pvalAllFitS, tablePvalQMin);
    foldChangeAllS=foldChangeAll(pvalAllFlag);
    addressAll=repelem(addressAll0, lengthV,1);
    numMotAllV=vertcat(numMotCellsC{:});
    numMotAllV=repelem(numMotAllV, lengthV,1);
    addressAllS=addressAll(pvalAllFlag, :);


    geneTextD=geneSetAllS(textingFlag);
    geneText=geneAnnotes(geneTextD);

    geneName=geneText(:);

    motifAddr=addressAllS(textingFlag, :);
    motifNumber=motifAddr(:, 1);
    motifPosition=motifAddr(:,2);
    cellType=motifAddr(:,3);
    pvalue=pvalAllFitS(textingFlag);
    deltaMedian=foldChangeAllS(textingFlag);
    medMotVec=vertcat(medMotC{:});
    medtypeVec=vertcat(medtypeC{:});
    medMotVecS=medMotVec(pvalAllFlag);
    medtypeVecS=medtypeVec(pvalAllFlag);
    motifMedian=medMotVecS(textingFlag);
    typeMedian=medtypeVecS(textingFlag);
    numMotAllVS=numMotAllV(pvalAllFlag, :);
    numCellsMot=numMotAllVS(textingFlag, :);

    numCellMotif=numCellsMot(:, 1);
    numCellType=sum(numCellsMot, 2);







    asignificantGenesTable=table(geneName,motifNumber,motifPosition,cellType, pvalue, deltaMedian, motifMedian, typeMedian, numCellMotif, numCellType);

    [~, ist]=sort(pvalue, 'descend');

    asignificantGenesTable=asignificantGenesTable(ist, :);



    csvFileName='geaTable';
    csvFileName=strcat(outputFolderName, csvFileName, '.csv');

    writetable(asignificantGenesTable,csvFileName)
else
    printf('There is no gene expression data!\n')

end




